package cn.ac.ioa.hccl.libsp.corr;
import java.io.*;
import cn.ac.ioa.hccl.libsp.util.*;

/**
 * The Hermitian correlation matrix generated by the sum of the vector outer products a*a'.
 * @author nay0648
 */
public class CorrelationMatrix extends ComplexMatrix
{
private static final long serialVersionUID = -3950925027739958534L;
private double[][] mr,mi;//real and the imaginary parts of the matrix

	/**
	 * @param size
	 * size of the matrix
	 */
	public CorrelationMatrix(int size)
	{
		super(size,size);
		
		mr=this.real();
		mi=this.imaginary();
	}
	
	/**
	 * add v*v' to the matrix
	 * @param v
	 * a vector
	 */
	public void accumulate(ComplexVector v)
	{
	double[] a,b;
	double real,imag;
	
		if(v.size()!=this.numRows()) throw new IllegalArgumentException(
				"vector and matrix size not match: "+v.size()+", "+this.numRows());
		
		a=v.real();
		b=v.imaginary();
		
		for(int i=0;i<mr.length;i++) 
			for(int j=i;j<mr[0].length;j++) 
			{
				real=a[i]*a[j]+b[i]*b[j];
				imag=b[i]*a[j]-a[i]*b[j];
				
				mr[i][j]+=real;
				mi[i][j]+=imag;
				
				if(i!=j) 
				{
					mr[j][i]+=real;
					mi[j][i]-=imag;
				}
			}
	}
	
	/**
	 * subtract v*v' from the matrix
	 * @param v
	 * a vector
	 */
	public void decumulate(ComplexVector v)
	{
	double[] a,b;
	double real,imag;
		
		if(v.size()!=this.numRows()) throw new IllegalArgumentException(
				"vector and matrix size not match: "+v.size()+", "+this.numRows());
			
		a=v.real();
		b=v.imaginary();
			
		for(int i=0;i<mr.length;i++) 
			for(int j=i;j<mr[0].length;j++) 
			{
				real=a[i]*a[j]+b[i]*b[j];
				imag=b[i]*a[j]-a[i]*b[j];
					
				mr[i][j]-=real;
				mi[i][j]-=imag;
					
				if(i!=j) 
				{
					mr[j][i]-=real;
					mi[j][i]+=imag;
				}
			}
	}
	
	public static void main(String[] args) throws IOException
	{
	ComplexMatrix m;
	CorrelationMatrix c;
	ComplexVector v=null;
	
		m=BLAS.randComplexMatrix(3, 100);
		BLAS.save(m.real(), new File("d:/mr.txt"));
		BLAS.save(m.imaginary(), new File("d:/mi.txt"));
		
		c=new CorrelationMatrix(m.numRows());
		
		for(int j=0;j<m.numColumns();j++)
		{
			v=m.getColumn(j, v);
			c.accumulate(v);
		}
		
		for(int j=0;j<m.numColumns();j++)
		{
			v=m.getColumn(j, v);
			c.decumulate(v);
		}
		
		System.out.println(c);
	}
}
